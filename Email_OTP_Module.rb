class Email_OTP_Module

# constructor on the instantiation of a new Email_OTP_Module object
  def initialize(user_email)
    @user_email = user_email
    @number_of_login_tries = 10
  end

  def start
  # tests if the email address includes @gmail.com
    if @user_email.match?(/@gmail.com/)
      puts "We have sent you an OTP"
      @number_of_login_tries = 10
      send_email(@user_email)
    else
      puts "please enter an email address with @gmail.com"
    end

  end


  def close
  end


  def generate_OTP_email(user_email) ()
    #generates a random 6 digit number for otp
    @random_OTP_number = 6.times.map{rand(10)}.join

  end

  def send_email(user_email)
    # the requirements state that we can assume the function send_email(email_address, email_body) is implemented.
    puts "Email: Your OTP Code is #{generate_OTP_email(user_email)}. The code is valid for 1 minute"

    # timer starts when email OTP is sent
    @start_of_counter = Time.now.to_i

    # ask the user to input the OTP sent by email
    inputReadOTP()

  end

  # This function:
    # reads the input stream for user input of the OTP. The OTP to match is the current OTP generated by a send
    # allows user 10 tries to enter the valid OTP. check_OTP should return after 1min if the user does not give a valid OTP.
  def check_OTP()
    # Calculates the time remaining for a user to confirm the OTP
    @time_left_in_seconds = 60- (Time.now.to_i - @start_of_counter)


    # The loop continues until the user logs in 10 times
    while true

    # The loop continues until  60 seconds are used up
      if @time_left_in_seconds <= 0
        puts "________________________________________"
        puts "STATUS_OTP_TIMEOUT: timeout after 1 min\n"
        puts "________________________________________"
        # @running = false
        break
        close

    # The program ends if the user inputs more than 10 incorrect OTPs
      elsif @number_of_login_tries < 1
        puts "________________________________________________"
        puts "STATUS_OTP_FAIL: OTP is wrong after 10 tries\n"
        puts "________________________________________________"
        puts ""
        # @running = false
        break
        close


    # success if OTP entered by user is correct
    elsif @otp_input_by_user == @random_OTP_number
        puts "________________________________________"
        puts "STATUS_OTP_OK: OTP is valid and checked"
        puts "________________________________________"
        # @running = false
        break

    elsif @otp_input_by_user != @random_OTP_number
        # If the user submits an incorrect OTP, the number of tries is reduced by 1 and the user is asked to submit another OTP
        puts "Sorry, you entered the wrong code"
        @number_of_login_tries -=1

        puts "You have #{@number_of_login_tries} more tries in #{@time_left_in_seconds} seconds.
        - please try again"

        inputReadOTP()
    else
      break
    end

  break

  end
end

# ask the user for an input if the OTP is incorrect
  def inputReadOTP
    puts "Please enter your OTP"
    @otp_input_by_user = gets.chomp
    check_OTP()
  end
end

# to record input from user


puts "Please enter your email address"
    user_email= gets.chomp



new_instanceof_of_Email_OTP  = Email_OTP_Module.new(user_email)
new_instanceof_of_Email_OTP.start
